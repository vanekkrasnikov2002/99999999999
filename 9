# ТЕМА 9: ФУНКЦИИ SQL

## Введение в SQL функции

SQL функции представляют собой набор инструкций SQL, объединенных в одну единицу, которую можно вызывать и использовать повторно. Они могут принимать аргументы, выполнять операции и возвращать результат. В этом разделе мы рассмотрим различные типы SQL функций и приведем примеры их использования.

## Пример 1: Отображение пользовательских таблиц

```sql
-- Этот запрос отображает все пользовательские таблицы в базе данных
SELECT * FROM Sys.objects WHERE Type='u'
```

Этот запрос отображает все пользовательские таблицы в базе данных, где `Sys.objects` - системная таблица, содержащая информацию о объектах в базе данных.

## Пример 2: Создание и вызов функции

```sql
-- Создание функции, которая обновляет регион во временной таблице
create or replace function fix_customer_region() returns void AS $$
	update tmp_customers
    set region = 'unknown'
    where region is null
$$ language sql;

-- Вызов функции
select fix_customer_region()
```

В этом примере создана функция `fix_customer_region`, которая обновляет регион во временной таблице `tmp_customers`. Затем вызывается эту функцию с помощью `select fix_customer_region()`.

# Скалярные функции

Скалярные функции - это функции, которые возвращают одно значение. Они могут принимать аргументы и выполнять операции над ними.

## Пример 1: Получение цены продукта по его имени

```sql
-- Создание функции, которая возвращает цену продукта по его имени
create or replace function get_product_price_by_name(prod_name varchar) returns real as $$
	select unit_price
	from products
	where product_name = prod_name
$$ language sql;

-- Вызов функции
select get_product_price_by_name('Chocolade')
```

В этом примере создана функция `get_product_price_by_name`, которая принимает имя продукта в качестве аргумента и возвращает его цену из таблицы `products`.

## Пример 2: Получение максимального количества заказа по стране доставки

```sql
-- Создание функции, которая возвращает максимальное количество заказов по стране доставки
create or replace function get_order_quantity(ship_country varchar) returns smallint as $$
	select MAX(quantity)
	from orders
	join order_details using(order_id)
	where ship_country = get_order_quantity.ship_country
$$ language sql;

-- Вызов функции
select get_order_quantity('France');
```

В этом примере создана функция `get_order_quantity`, которая принимает страну доставки в качестве аргумента и возвращает максимальное количество заказов для этой страны.

# Аргументы функций SQL: IN, OUT, DEFAULT

SQL функции могут иметь аргументы входного и выходного типов, а также значения по умолчанию.

## Пример 1: Функция с выходными параметрами

```sql
-- Создание функции, которая возвращает максимальную и минимальную цену продукта
create or replace function get_price_boundaries(out max_price real, out min_price real) AS $$
	SELECT MAX(unit_price), MIN(unit_price)
	FROM products
$$ language sql;

-- Вызов функции
select get_price_boundaries()
```

В этом примере создана функция `get_price_boundaries`, которая возвращает максимальную и минимальную цену продукта в выходных параметрах.

## Пример 2: Функция с аргументом по умолчанию

```sql
-- Создание функции с аргументом по умолчанию
create or replace function get_price_boundaries_by_discontinuity
	 (in is_discontinued int DEFAULT 1, out max_price real, out min_price real) AS $$
	SELECT MAX(unit_price), MIN(unit_price)
	FROM products
	where discontinued = is_discontinued
$$ language sql;

-- Вызов функции с указанием аргумента по умолчанию
select get_price_boundaries_by_discontinuity(1);
-- Вызов функции без указания аргумента (используется значение по умолчанию)
select get_price_boundaries_by_discontinuity();
```

В этом примере создана функция `get_price_boundaries_by_discontinuity`, которая принимает аргумент `is_discontinued` со значением по умолчанию равным 1. Вызывая функцию без указания аргумента, используется значение по умолчанию.

# Возврат наборов данных

SQL функции также могут возвращать наборы данных. Ниже приведен пример функции, возвращающей случайное число.

## Пример: Функция, возвращающая случайное число

```sql
-- Создание функции, возвращающей случайное число в заданном диапазоне
CREATE OR REPLACE FUNCTION random_between(low INT ,high INT) 
   RETURNS INT AS
$$
BEGIN
   RETURN floor(random()* (high-low + 1) + low);
END;
$$ language 'plpgsql' STRICT;
```

В этом примере создается функция `random_between`, которая возвращает случайное число в заданном диапазоне от `low` до `high`. Функция использует PL/pgSQL (язык для PostgreSQL) для определения логики функции.
